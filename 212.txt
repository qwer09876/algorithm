class Solution {        
    private boolean[][] vis;//用来标记是否走过
    public List<String> findWords(char[][] board, String[] words) {
        vis=new boolean[board.length][board[0].length];//初始化标记地图
        List<String>res=new ArrayList<>();//存入结果的列表
        for(int i=0;i<words.length;i++){
            if(dfs(words[i],board)){//如果可以找到这个单词，存入列表
                res.add(words[i]);//存入列表
            }
        }
        return res;//返回列表
    }
    private boolean dfs(String word, char[][] board) {
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){//遍历字典图
                if(board[i][j]==word.charAt(0)){//如果找到要找单词的开头字母
                    if(CheckOk(word,board,i,j,1)){//如果后面字母都匹配，就表示可以找到这个单词,,,,传入参数，要找的单词，字典，行，列，字母个数1
                        return true;//返回找到
                    }
                }
            }
        }
        return false;//没找到就返回没有
    }

    private boolean CheckOk(String word, char[][] board, int i, int j, int lever) {
        boolean falg=false;//初始化标记
        if(lever==word.length())//
            return true;
        vis[i][j]=true;//进入便标记
      //上如果没标记，如果是需要的字母就往上搜
        if(i-1>=0&&!vis[i-1][j]&&board[i-1][j]==word.charAt(lever)){
            falg|=CheckOk(word,board,i-1,j,lever+1);//往上搜如果可以成功便存下true
        }//下
        if(i+1<board.length&&!vis[i+1][j]&&board[i+1][j]==word.charAt(lever)){//
            falg|=CheckOk(word,board,i+1,j,lever+1);//
        }  
        //左
        if(j-1>=0&&!vis[i][j-1]&&board[i][j-1]==word.charAt(lever)){//
            falg|=CheckOk(word,board,i,j-1,lever+1);//
        }//右
        if(j+1<board[0].length&&!vis[i][j+1]&&board[i][j+1]==word.charAt(lever)){//
            falg|=CheckOk(word,board,i,j+1,lever+1);
        }
        vis[i][j]=false;//回溯
        return falg;//返回结果到拉列表
    }
}class Solution {        
    private boolean[][] vis;//用来标记是否走过
    public List<String> findWords(char[][] board, String[] words) {
        vis=new boolean[board.length][board[0].length];//初始化标记地图
        List<String>res=new ArrayList<>();//存入结果的列表
        for(int i=0;i<words.length;i++){
            if(dfs(words[i],board)){//如果可以找到这个单词，存入列表
                res.add(words[i]);//存入列表
            }
        }
        return res;//返回列表
    }
    private boolean dfs(String word, char[][] board) {
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){//遍历字典图
                if(board[i][j]==word.charAt(0)){//如果找到要找单词的开头字母
                    if(CheckOk(word,board,i,j,1)){//如果后面字母都匹配，就表示可以找到这个单词,,,,传入参数，要找的单词，字典，行，列，字母个数1
                        return true;//返回找到
                    }
                }
            }
        }
        return false;//没找到就返回没有
    }

    private boolean CheckOk(String word, char[][] board, int i, int j, int lever) {
        boolean falg=false;//初始化标记
        if(lever==word.length())//
            return true;
        vis[i][j]=true;//进入便标记
      //上如果没标记，如果是需要的字母就往上搜
        if(i-1>=0&&!vis[i-1][j]&&board[i-1][j]==word.charAt(lever)){
            falg|=CheckOk(word,board,i-1,j,lever+1);//往上搜如果可以成功便存下true
        }//下
        if(i+1<board.length&&!vis[i+1][j]&&board[i+1][j]==word.charAt(lever)){//
            falg|=CheckOk(word,board,i+1,j,lever+1);//
        }  
        //左
        if(j-1>=0&&!vis[i][j-1]&&board[i][j-1]==word.charAt(lever)){//
            falg|=CheckOk(word,board,i,j-1,lever+1);//
        }//右
        if(j+1<board[0].length&&!vis[i][j+1]&&board[i][j+1]==word.charAt(lever)){//
            falg|=CheckOk(word,board,i,j+1,lever+1);
        }
        vis[i][j]=false;//回溯
        return falg;//返回结果到拉列表
    }
}