class Solution {
int[][] des = new int[][]{{1,3,-1}, {0,2,4}, {1,5,-1}, {0,4,-1}, {1,3,5}, {2,4,-1}};//第0个可以和第1个，第3个交换。第1个可以和第0个，第2个交换。。。
public int slidingPuzzle(int[][] board) {
	String boardStr ="";
    for(int i=0;i<board.length;i++){//把二维数组变成字符串
        for(int j=0;j<board[0].length;j++){
            boardStr+=board[i][j];//一个个取出来加入字符串
        }
    }
	String targetStr = "123450";//最后的结束形式
	if (boardStr.equals(targetStr)) return 0;//如果就是这个形式就0步
	Set<String> visited = new HashSet<>();//去重的哈希表
	visited.add(boardStr);//把交换得到的每种情况放进去
	Queue<String> queue = new LinkedList<>();//队列
	queue.offer(boardStr);//放入队列中
	int res = 0;//计步数
	while (!queue.isEmpty()) {//bfs标准套路
		int size = queue.size();//记长度
		while (size-- > 0) {//循环
			String str = queue.poll();//从队列中取出来
			if (str.equals(targetStr)) return res;//如果可以达到最终情况，返回步数
			char[] charArr = str.toCharArray();//把它变成字符数组
			for (int h = 0; h < charArr.length; h++) {//单个字符遍历
				if (charArr[h] != '0') continue;//找空缺的位置（0）
				for (int j = 0; j < des[0].length; j++) {//方向bfs
					if (des[h][j] != -1) {//-1就是此位置不能和那个方向的值（那里是空）交换
						//
						char[] charArrTemp = charArr.clone();//备份charArr,charArr会改变，所以拷贝一份还原
                        if(charArr[h]!=charArr[des[h][j]]){
						char temp1 = charArr[h];//遍历位置的值和可交换的地方的字符交换
				
                        charArr[h] = charArr[des[h][j]];
						charArr[des[h][j]] = temp1;//交换
                    }
						if (!visited.contains(String.valueOf(charArr))) {//
							queue.offer(String.valueOf(charArr));//如果哈希表中不包含交换过的字符串就加入队列中
						}
						visited.add(String.valueOf(charArr));//因为哈希表自动去重，直接加入哈希表中
						charArr = charArrTemp;//回溯
					}
				}
			}
		}
		res++;//取完一组加一步
	}
	return -1;//如果没有返回步数，就不能完成谜板
}
}