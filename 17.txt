class Solution {
    char[][] arr={{},{},{'a','b','c'},{'d','e','f'},{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r','s'},{'t','u','v'},{'w','x','y','z'}};//1-9的数字表示的字母
    List<String> ans=new ArrayList<String>();//定义最后返回的结果
    public List<String> letterCombinations(String digits) {
        if(digits==null||"".equals(digits))return ans;
        char[] ch=digits.toCharArray();//用字符数组存起来
        dfs(0,ch,"");//调用函数存入ans值
        return ans;
    }
    void dfs(int a,char[] ch,String b){
        if(a==ch.length){//如果数字字符串搞定了就增加ans的值并返回ans的值
            ans.add(b);//
            return ;
        }
        int n=(int)(ch[a]-'0');//把字符数字变成下标
        for(int i=0;i<arr[n].length;i++){//从数字里面的字母开始遍历
            dfs(a+1,ch,b+arr[n][i]);//分别递归组合
        }
    }
}