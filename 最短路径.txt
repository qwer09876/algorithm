package zuiduanRoad;
import java.util.Scanner;

public class Main {
	static int[][] d;
	static int n,m;
	static final int W=50000000;//用来初始化dp数组
	public static void main(String[] args) {
		Scanner sr=new Scanner(System.in);//输入
		n=sr.nextInt();//输入顶点个数
		m=sr.nextInt();//边的条数
		d=new int[W/100000][W/1000000];//dp数组开辟空间
		
		for(int i=0;i<n;i++)//
			for(int j=i+1;j<n;j++){//
				d[i][j]=d[j][i]=W;//初始化图
			}
		
		for(int i=0;i<m;i++) {
			int u=sr.nextInt();//
			int v=sr.nextInt();//
			d[u-1][v-1]=sr.nextInt();//把路径的关系存入图中
		}
//		for(int i=0;i<m;i++) {//
//			for(int j=0;j<m;j++){//
//				System.out.print(d[i][j]+" ");//
//			}System.out.println();}
		floyd();//
		for(int i=1;i<n;i++){
		    if(d[0][i]!=W)
		    	System.out.println(d[0][i]);//从一号到其他路都是在第0列的数据，如果非初始化的值，就是到其他路径的最短距离
		}
//3 3
//1 2 -1
//2 3 -1
//3 1 2
//		for(int i=0;i<m;i++) {
//			for(int j=0;j<m;j++){
//				System.out.print(d[i][j]+" ");
//			}System.out.println();}
		sr.close();
	}
	static void floyd(){
		for(int k=0;k<n;k++)//遍历判断最短路径
		for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
		d[i][j]=Integer.min(d[i][j],d[i][k]+d[k][j]);（上次计算距离与上条路径到这边距离和的最小值，dp求值。）
		}
}
